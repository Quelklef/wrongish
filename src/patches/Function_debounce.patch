::host Function
::type <F extends (...args: any[]) => void>(this: F, delay: number) => F
::syms debounce

::docn
Collapses calls within `delay` milliseconds of each other into a single call.

::impl
function debounce(delay) {
  let timeoutId = setTimeout(() => {}, 0);

  const func = this;
  return function(...args) {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func.call(this, ...args), delay);
  }
}

::test
return (async () => {

  let called = 0;
  const inc: () => void = () => called++;

  const db: typeof inc = inc[$.debounce](50);

  for (let i = 0; i < 2; i++) {
    for (let j = 0; j < 3; j++) {
      await new Promise(r => setTimeout(r, 25));
      db();
    }
    await new Promise(r => setTimeout(r, 50));
  }

  expect(called).toBe(2);

})();
