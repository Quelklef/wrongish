::host Array<T>
::type <K>(kind: K) => K extends { new(...args: any): any } ? InstanceType<K>[] : K extends 'string' ? string[] : K extends 'number' ? number[] : K extends 'bigint' ? bigint[] : K extends 'boolean' ? boolean[] : K extends 'symbol' ? symbol[] : never
::syms filterIsA filterIsAn filterIs filterOf filterInstanceOf filterTypeof

::docn
This method has two different funcionalities:

1. If given a constructor function, filter to instances of the constructor
2. If given a string, filter to elements whos `typeof` returns the string

Useful because Typescript doesn't realize that `xs.filter(x => x instanceof Y)` is an `Array<Y>` or that `[1, 's'].filter(x => typeof x === 'number')` is an `Array<number>`. Calls to this method will be correctly typed.

::impl
function(kind) {
  if (kind instanceof Function)
    return this.filter(x => x instanceof kind);

  if (!['string', 'number', 'bigint', 'boolean', 'symbol'].includes(kind)) {
    throw Error(`Invalid primitive type '${kind}'`);
  }

  return this.filter(x => typeof x === kind);
}

::test

const ok = Symbol('ok');

const mixed = [
  new String('abc'),
  new Number(123),
  'string',
  12,
  BigInt(12),
  true,
  ok,
];

const Strings: Array<String> = mixed[W.filterIsA](String);
const Numbers: Array<Number> = mixed[W.filterIsA](Number);
const strings: Array<string> = mixed[W.filterIsA]('string');
const numbers: Array<number> = mixed[W.filterIsA]('number');
const bigints: Array<bigint> = mixed[W.filterIsA]('bigint');
const symbols: Array<symbol> = mixed[W.filterIsA]('symbol');
const booleans: Array<boolean> = mixed[W.filterIsA]('boolean');

// Ensure runtime worked correctly
expect(mixed[W.filterIsA](String)).toStrictEqual([new String('abc')]);
expect(mixed[W.filterIsA](Number)).toStrictEqual([new Number(123)]);
expect(mixed[W.filterIsA]('string')).toStrictEqual(['string']);
expect(mixed[W.filterIsA]('number')).toStrictEqual([12]);
expect(mixed[W.filterIsA]('bigint')).toStrictEqual([BigInt(12)]);
expect(mixed[W.filterIsA]('boolean')).toStrictEqual([true]);
expect(mixed[W.filterIsA]('symbol')).toStrictEqual([ok]);
