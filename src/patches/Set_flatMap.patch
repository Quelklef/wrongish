::host Set<T>
::type <S>(mapper: (item: T) => Iterable<S>) => Set<S>
::syms flatMap

::docn
Like `Array#flatMap`, but for `Set`

::impl
function(mapper) {
  const result = new Set();
  for (const elem of this)
    for (const item of mapper(elem))
      result.add(item);
  return result;
}

::test
const items = new Set([1, 2, 3]);
const result = items[W.flatMap](x => [x, Math.pow(x, 2), Math.pow(x, 3)]);
expect(result).toEqual(new Set([1, 1, 1, 2, 4, 8, 3, 9, 27]));
