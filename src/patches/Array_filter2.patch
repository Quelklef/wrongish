::host Array<T>
::type <R extends T>(predicate: (item: T) => item is R) => Array<R>
::syms filter2

::docn
Identical to `Array#filter` in every way except for its type.

While `Array<T>#filter` has the return type `Array<T>`, `Array<T>#[filter2]` expresses within the type that the elements have passed the predicate, returning an `Array<R>`.

**Note**: The choice of the name `filter2` is intentionally obtuse in order not to suggest different semantics from `Array#filter`, which a more meaingful name like `filterAndRefine` may have done. If you feel there is a better name for `includes2`, please let me know.

::impl
Array.prototype.filter

::test
const nums = [1, 'two', 3, 'four'];
const pred = (x: string | number): x is number => typeof x === 'number';

const filtered = nums[W.filter2](pred);
expect(filtered).toEqual([1, 3]);
numberArrayOnly(filtered);

function numberArrayOnly(ns: number[]) { }
