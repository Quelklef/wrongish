::host Object
::type <T>(targetConstructor: Function) => T
::syms to as

::docn

Converts an object of one type to another type.

Supported conversions:
- `Iterable` -> `Array`
- `Iterable` -> `Set`

```js
const items = [1, 1, 2, 2, 3, 3];
const uniq = items[W.to](Set)[W.to](Array);
console.log(uniq);  // [1, 2, 3]
```

::impl

function(toType) {
  const fromType = Object.getPrototypeOf(this).constructor;
  if (Symbol.iterator in this && toType === Set)
    return new Set(this);
  if (Symbol.iterator in this && toType === Array)
    return Array.from(this);
  throw Error(`Unknown conversion {fromType.name} to {toType.name}.`);
}

::test

it('Iterable (Array) -> Set', () => {
  const items = [1, 1, 2, 2, 3, 3];
  const set = items[W.to](Set);
  expect(set).toEqual(new Set([1, 2, 3]));
});

it('Iterable (generator) -> Set', () => {
  function* gen() {
    yield 1; yield 1;
    yield 2; yield 2;
    yield 3; yield 3;
  }
  const set = gen()[W.to](Set);
  expect(set).toEqual(new Set([1, 2, 3]));
});

it('Iterable (Set) -> Array', () => {
  const items = new Set([1, 2, 3]);
  const array = items[W.to](Array);
  expect(array).toEqual([1, 2, 3]);
});
